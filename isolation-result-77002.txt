Results:
--------

************************************************************************
                         Test Failure Feedback
************************************************************************

Failed Test: 2. Test functionality of MinimaxPlayer.minimax()
----------------------------------------------------------------------
AssertionError: False is not true : Your MinimaxAgent.minimax function did not call the heuristic evaluation function in all of the expected set of leaf nodes configurations in the game tree as player 1. Make sure that you are using the self.score() method to evaluate the board, and not calling one of the heuristic functions directly. Leaf nodes are shown as (player_1, player_2) location pairs. Optional nodes may or may not be visited depending on your termination test.

Expected leaf nodes:
{((3, 1), (4, 7)), ((0, 4), (4, 7)), ((1, 1), (4, 7)), ((0, 2), (4, 7)), ((4, 2), (4, 7))}
Optional leaf nodes:
set()
Leaf nodes your agent evaluated:
{((2, 3), (4, 7)), ((3, 1), (4, 7)), ((0, 4), (4, 7)), ((1, 1), (4, 7)), ((0, 2), (4, 7)), ((4, 2), (4, 7))}
Skipped nodes:
set()
Extra nodes:
{((2, 3), (4, 7))}

Test Case Details:
------------------
Heuristic: open_move_score
Depth limit: 1
Initial Board State:
     0   1   2   3   4   5   6   7   8
0  |   |   |   |   |   |   |   |   |   |
1  |   |   |   |   | - | - |   |   |   |
2  |   |   | - | 1 | - | - | - |   |   |
3  |   |   | - |   | - | - | - | - |   |
4  |   |   |   |   | - | - | - | 2 |   |
5  |   |   | - | - | - | - | - |   |   |
6  |   |   | - | - | - |   |   |   |   |
7  |   |   |   |   |   |   |   |   |   |
8  |   |   |   |   |   |   |   |   |   |

game._board_state:
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 29]



Failed Test: 7. Test functionality of AlphaBetaPlayer.alphabeta()
----------------------------------------------------------------------
AssertionError: False is not true : Your AlphaBetaAgent.alphabeta function returned a move that was not one of the optimal moves for the given heurisitc.
Available choices:
[(2, 0)]
Your Selection: (1, 3)

Test Case Details:
------------------
Heuristic: center_distance
Depth limit: 1
Initial Board State:
     0   1   2   3   4   5   6   7   8
0  |   |   |   |   |   |   |   |   |   |
1  |   |   |   |   |   |   |   |   |   |
2  |   |   |   |   | - |   |   |   |   |
3  |   |   | 1 | - | - |   | - |   |   |
4  |   |   |   | - | - |   | - |   |   |
5  |   |   | - |   | - |   |   |   |   |
6  |   |   | - |   | - | - | 2 |   |   |
7  |   |   |   |   |   |   |   |   |   |
8  |   |   |   |   |   |   |   |   |   |

game._board_state:
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 21]



Failed Test: 9. Test iterative deepening in AlphaBetaPlayer.get_move()
----------------------------------------------------------------------
AssertionError: False is not true : Your agent did not call the search function self.alphabeta() the expected number of times.  Iterative deepening should call the search function with sequential values until SearchTimeout is raised. SearchTimeout was set to be raised after 24 moves, and your agent called the search function 1 times.


Failed Test: 14. Submission includes heuristic_analysis.pdf
----------------------------------------------------------------------
AssertionError: False is not true : You must submit a report named heuristic_analysis.pdf for review.


Failed Test: 15. Submission includes research_review.pdf
----------------------------------------------------------------------
AssertionError: False is not true : You must submit a report named research_review.pdf for review.


************************************************************************
                          Test Result Summary
************************************************************************

1. Test output interface of MinimaxPlayer.minimax():                   .
2. Test functionality of MinimaxPlayer.minimax():                      F
3. Test that minimax() raises SearchTimeout when the timer expires:    .
4. Test that MinimaxPlayer successfully plays a full game:             .
5. Test interface of AlphaBetaPlayer.alphabeta():                      .
6. Test the interface of AlphaBetaPlayer.get_move():                   .
7. Test functionality of AlphaBetaPlayer.alphabeta():                  F
8. Test that alphabeta() raises SearchTimeout when the timer expires:  .
9. Test iterative deepening in AlphaBetaPlayer.get_move():             F
10. Test that AlphaBetaPlayer successfully plays a full game:          .
11. Test output interface of custom_score():                           .
12. Test output interface of custom_score_2():                         .
13. Test output interface of custom_score_3():                         .
14. Submission includes heuristic_analysis.pdf:                        F
15. Submission includes research_review.pdf:                           F

------------------------------------------------------------------------
            . - Test Passed    F - Test Failed    E - Error

--------------------------------------------------------------------------------

Not all of the tests passed.  If you are really stuck, consider asking your classroom mentor for help.
